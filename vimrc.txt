" 使用vim的modeline来设置当前文件的textwidth,避免输入超过78个字符时自动换行
" 使用:verbose set textwidth?命令可以看到vim默认为vim配置脚本设置了textwidth
" 为78,当输入超过78个字符并按下空格键时会自动换行.将textwidth设成0关闭该功能
"" vim: tw=0 :
" 去掉有关vi一致性模式,避免操作习惯上的局限.
set nocompatible
" 让Backspace键可以往前删除字符.
" Debian系统自带的vim版本会加载一个debian.vim文件,默认已经设置这一项,
" 可以正常使用Backspace键.如果使用自己编译的vim版本,并自行配置.vimrc文件,
" 可能就没有设置这一项,导致Backspace键用不了,或者时灵时不灵.所以主动配置.
set backspace=indent,eol,start
" 1=启动显示状态行, 2=总是显示状态行.设置总是显示状态行,方便看到当前文件名.
set laststatus=2
" 设置ruler会在右下角显示光标所在的行号和列号,不方便查看.改成设置状态栏显示内容
"" set ruler
" 设置状态行显示的内容. %F: 显示当前文件的完整路径. %r: 如果readonly,会显示[RO]
" %B: 显示光标下字符的编码值,十六进制. %l:光标所在的行号. %v:光标所在的虚拟列号.
" %P: 显示当前内容在整个文件中的百分比. %H和%M是strftime()函数的参数,获取时间.
set statusline=%F%r\ [HEX=%B][%l,%v,%P]\ %{strftime(\"%H:%M\")}
" 显示还没有输入完整的命令.例如yy命令,输入第一个y会在右下角显示y.
set showcmd
" 使用Tab键补全时,在状态栏显示匹配的列表,方便查看都有哪些命令符合补全条件.
set wildmenu
" 显示行号
set number
" 高亮显示匹配的括号
set showmatch
" 高亮显示所有搜索到的内容.后面用map映射快捷键来方便关闭当前搜索的高亮.
set hlsearch
" 光标立刻跳转到搜索到内容
set incsearch
" 搜索到最后匹配的位置后,再次搜索不回到第一个匹配处
set nowrapscan
" 去掉输入错误时的提示声音
set noeb
" 默认按下Esc后,需要等待1秒才生效,设置Esc超时时间为100ms,尽快生效
set ttimeout
set ttimeoutlen=100
" 设置文件编码,主要是避免中文乱码.先注释,后续遇到中文乱码再打开
"" set fileencodings=utf-8,cp936,big5,latin1
" FIXME 在MS-DOS控制台打开vim时,控制台使用鼠标右键来复制粘贴,设置
" 全鼠标模式,鼠标右键被映射为visual mode,不能用来复制粘贴,不方便.
" 但是如果不设置鼠标模式,会无法使用鼠标滚轮来滚动界面.经过验证,发现
" 可以设成普通模式mouse=n来使用鼠标滚轮,也能使用鼠标右键复制粘贴.
" mouse=c/mouse=i模式都不能用鼠标滚轮. Linux下还是要设成 mouse=a
set mouse=n
" FIXME 在MS-DOS控制台打开vim,光标很小,不方便看到光标在哪里.下面
" 设置cursorline,高亮光标所在的行.cursorlineopt=number只高亮行号部分,
" 不影响正文内容的显示. 在其他容易看到光标的终端上可以去掉这两个设置.
set cursorline
set cursorlineopt=number

" 开启语法高亮
syntax enable
" 检测文件类型,并载入文件类型插件,为特定文件类型载入相关缩进文件
filetype plugin indent on
" 设置自动补全的选项. longest表示只自动补全最大匹配的部分,剩余部分通过
" CTRL-P/CTRL-N来选择匹配项进行补全. menu表示弹出可补全的内容列表.
" 如果有多个匹配,longest选项不会自动选中并完整补全,要多按一次CTRL-P,比较
" 麻烦,不做设置,保持默认设置,vim默认没有设置longest.
"" set completeopt=longest,menu
" 自动缩进.这个导致从外面拷贝多行以空格开头的内容时,会有多的缩进,先不设置.
"" set autoindent
" 设置C风格的自动缩进.设置filetype indent on后,就会根据文件类型自动缩进.
" 按照vim用户手册"30.3 Automatic indenting"的说明,可以不再单独设置cindent.
"" set cindent
" 自动缩进时,缩进长度为4
set shiftwidth=4
" 输入Tab字符时,自动替换成空格
set expandtab
" softtabstop设置插入模式下按Tab键得到的字符.例如tabstop是8,softtabstop是4,
" 且没有设置expandtab时,第一次按Tab键,得到4个空格,再按一次Tab键,会删除前面
" 的4个空格,得到一个Tab字符,由于tabstop是8,会看到光标又往前移动4个字符,像是
" 又插入4个空格,但实际插入了Tab字符. 设置expandtab时,按两次Tab键才是插入8个
" 空格. 即,softtabstop不改变Tab字符的显示长度,Tab字符始终显示为tabstop设置
" 的长度.softtabstop改变的是按Tab键时是否真的插入Tab字符,当到达tabstop指定的
" 长度时才真的插入Tab字符.没有设置expandtab,如果softtabstop和tabstop都设成4,
" 那么每次按Tab键都会插入Tab字符.如果不想插入Tab字符,必须设置expandtab才生效.
" 如果要改变Tab字符的显示长度,需要tabstop.vim用户手册建议保持tabstop为8不变.
" 设置softtabstop有一个好处是可以用Backspace键来一次删除4个空格.
" softtabstop的值为负数,会使用shiftwidth的值,两者保持一致,方便统一缩进.
set softtabstop=-1

" 设置颜色主题,适用于黑色背景.如果使用下面的第二个autocmd命令要注释这个设置.
colorscheme slate
" 下面的设置会对所有文件都生效,而这个设置主要是针对代码文件,其他文件不需要.
" 改成后面的方案,判断文件类型是特定代码文件,再进行设置,其他文件则用默认设置
"" hi SpecialKey ctermbg=DarkRed ctermfg=White
" 针对特定类型的代码文件,设置显示Tab键和行尾空格以便在查看代码时注意到它们.
" 设置Tab字符可见,默认也会看到行末的回车符,下面通过listchars修改显示样式.
" 设置Tab字符的可见样式为">...",具体有多少个'.',取决于Tab的宽度. trail:- 指定
" 显示行尾的空格为'-',非行尾的空格还是保持不可见.它们的颜色高亮对应 hl 命令的
" SpecialKey类型,部分颜色主题会显示SpecialKey和Comment为相同颜色,查看代码文件
" 时容易把Tab、行末空格转换显示的字符当成代码文件自身的字符,为了便于区分,单独
" 为SpecialKey设置颜色,设置背景色为红色.该功能主要是针对代码文件,其他文件不用.
" 注意: 如果用 set list 命令设置,那么先打开c/cpp/java/xml类型文件,再打开其他
" 类型文件,其他类型文件也会设置了list,改用setlocal list,不影响到其他的buffer.
" 注意: 下面基于 FileType 方式来设置SpecialKey的背景色可以工作,但是用e命令打开
" 其他文件时,其他文件的SpecialKey也被设置成这个背景色(执行:map命令可以看到效果)
" 如果没有配置set list,其他文件的Tab字符、行末空格不可见,对文件内容显示影响不大
" 可以使用下面第二个autocmd命令来避免这个问题.目前先不用第二个命令的方案.
"" autocmd FileType c,cpp,java,xml setlocal list | set listchars=tab:>.,trail:-
""    \ | hi SpecialKey ctermfg=darkgrey
" 通过filetype的 ft 变量来获取文件类型, 要用 &ft 来取得它的值.
" 这个命令针对所有类型文件,获取文件类型,如果是c/cpp/java/xml类型文件,才设置
" SpecialKey的背景色;其他类型文件则保持默认背景色不变,通过执行colorscheme命令
" 来达到这个效果,必须在autocmd中执行colorscheme才会生效.目前没有找到通过hi命
" 令恢复颜色主题默认背景色的方法,因为不知道该主题的SpecialKey默认背景色是什么.
"" autocmd BufEnter * colorscheme slate
""     \ | if &ft=='c'||&ft=='cpp'||&ft=='java'||&ft=='xml'
""     \ | hi SpecialKey ctermbg=DarkRed ctermfg=White
""     \ | setlocal list | set listchars=tab:>.,trail:-
""     \ | endif
" 上面的方案会在打开每个文件、触发BufEnter事件时执行 colorscheme slate 命令,
" 感觉有些重复,不想采用这个方案.但又不知道颜色主题的SpecialKey默认背景色是什么,
" 如果强制设置SpecialKey为特定的颜色,可能会跟当前颜色主题的颜色冲突,显示效果差.
" 有一个方案是设置SpecialKey共用其他组的颜色,可以复用同一个颜色主题下的设置,
" 从而避免颜色冲突.用 hi! link SpecialKey NonText 命令来设置共用NonText的颜色.
" 用 hi! link SpecialKey NONE 可以取消共用颜色,恢复SpecialKey默认的颜色.
" 设置list和listchars,显示的Tab字符、空格使用SpecialKey颜色,改变SpecialKey的
" 颜色会影响整个类型.如果只是想设置Tab字符和空格的颜色,影响比较小的做法如下.
" 创建一个新的 MyTabSpace 组,并设置它的颜色
highlight MyTabSpace ctermfg=darkgrey
" 指定特定字符串的颜色组为MyTabSpace,不同字符串之间用|隔开,要使用\|转义.
match MyTabSpace /\t\| /
" 针对特定类型的代码文件,设置显示Tab键和行尾空格以便在查看代码时注意到它们
" TODO 后续查看代码如果体验不好再改成用map映射快捷键开关list来动态切换显示
autocmd FileType c,cpp,java,xml setlocal list | set listchars=tab:>~,trail:.

" 配置 gtags
" 参考 gtags-cscopde.vim 的注释,添加下面语句来使用 ':tag' 和 '<C-]>'
set cscopetag
" 设置 cscopetag 后,由于gtags-cscopde默认没有启动,还需要进行下面的设置,
" 结合这两个设置, gtags 就可以使用Ctrl-]键来跳转到函数定义处.
let GtagsCscope_Auto_Load = 1
" 配置 GtagsCscope_Auto_Load = 1 后,在没有GTAGS文件的目录下使用vim,会提示
" Gtags-cscope: GTAGS not found.
" Press ENTER or type command to continue
" 需要按回车才会打开文件.如果要去掉这个报错,需要设置GtagsCscope_Quiet = 1
let g:GtagsCscope_Quiet = 1
" 设置只有一个匹配结果时,不显示quickfix窗口
let g:Gtags_Close_When_Single = 1

" 配置 quickfix 相关命令的快捷键. 可以用:map命令查看vim已有的快捷键映射.
nnoremap <F2> :cclose<CR>
nnoremap <F3> :cn<CR>
nnoremap <F4> :cp<CR>
" vim 用 map 命令来映射快捷键,它前面可以加一些前缀来对应不同的场景.
" 下面 map 前面的 nore 表示非递归. nore 前面的n表示只在普通模式下生效.
" 即,基于下面的配置,在插入模式下,按F6没有这个映射效果.插入模式对应i.
" 下面配置cscope查找文件命令的快捷键为F6,由于需要手动输入文件名,不要加<CR>
nnoremap <F6> :cs find f<Space>
" 如果要去掉高亮显示搜索到的内容,需要再次搜索一些不存在的字符串,比较麻烦.可以
" 在vim的命令行中执行nohlsearch命令去掉当前高亮.下面以:开头表示在命令行执行.
nnoremap <F9> :nohlsearch<CR>
" 插入模式下也用F9来去掉搜索高亮.下面的<C-o>表示CTRL-O,在插入模式执行一次命令
inoremap <F9> <C-o>:nohlsearch<CR>
