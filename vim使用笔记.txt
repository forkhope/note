===== r !cmd
把外部shell命令的执行结果写入当前光标所在处.

===== g/pattern/d
删除包含特定字符的行.
例如删除所有以'D'开头的行,可以执行 :g/^D/d 命令.

===== sort u
把所有重复行全删除只保留一个,且重新排序.

===== %s/^\s*//或者%s/^\s\+//
删除行首的所有空格."^\s\+"表示行首(^)的一个或者
多个(\+)空格(\s).注意,如果写成%s/^\s//的形式,只会删除行首的第一个空格,
而不能删除多个空格.写成%s/^\+\s//的形式也是只能删除行首的第一个空格.

===== %s/\s\+$//
删除行末的所有空格."\s\+$"表示行末($)前的一个或者多个(\+)空格(\s).
类似的,也可以写成 %s/\s*%// 的形式.

===== 用 y 命令复制
yw: 复制一个单词(包括单词后面的空白字符).
ye: 复制一个单词(不包括单词后面的空白字符).

4yl: 复制当前光标以及后面三个字符,总共4个字符.如果想复制光标前的字符,则
  用yh, 4yh表示复制光标前4个字符(不包括当前光标所在的字符).yl复制当前光标
  所在的字符.另外,也可以输入'v',切换到可视模式,移动光标,按y复制选中的字符.

===== qall
使用vim编辑多个文件时,可以使用qall来一次性关闭所有文件.可简写为qa.

===== vim + filename
用vim打开文件时,自动跳到文件末尾."man vim"对此的解释为:
  +[num]: For the first file the cursor will be positioned on line "num".
  If "num" is missing, the cursor will be positioned on the last line.

===== 在程序代码中快速跳转
[m  跳转到当前光标的上一个函数头(左大括号).
[M  会跳转到当前光标的上一个函数尾(右大括号).
]m  跳转到当前光标的下一个函数头(左大括号).
]M  跳转到当前光标的下一个函数尾(右大括号).

[{  跳转到当前光标往上一级大括号的开始处(左大括号). 
]}  跳转到当前光标往上一级大括号的结束处(右大括号).

这些命令都可以在前面加上数字,表示跳转级数. 例如:
   3[m 将跳转到当前光标往上第三个函数的开始处(左大括号).
   3[{ 将跳转到当前光标往上三级大括号的开始处(左大括号).

===== 使用vim将文件转成html格式
vim可以使用 TOhtml 命令来将当前文件转换出 html 文件. TOhtml使用起来很简单.
如果需要把整个文档转成html,在命令模式下执行：
:TOhtml

如果只是需要转某几行代码（如30到42行），则执行：
:30,42TOhtml
如果当前 vim 配置成显示行号,所转换出来的 html 文件中也会带有行号.

===== 去掉搜索内容的高亮
vim打开搜索高亮(set hlsearch)后，搜索到的内容会一直高亮显示。
如果要去掉搜索内容的高亮，可以搜索一些不存在的内容，搜索不到
就会去掉之前的高亮。
这是取巧的做法.  标准做法是执行 :nohlsearch 命令。
这个命令会去掉搜索内容的高亮,但还是打开搜索高亮功能,
下次搜索到内容还是会高亮.

===== 用列表形式显示所有查找到的内容
vim在文件内用/或者?查找，不会列出所有查找到的内容，需要通过n或者N命令
逐一跳转到匹配的位置。
如果想要用列表的形式显示所有查找到的内容，可以用[I命令.
注意[后面跟着的是大写字母I.
[I 表示从文件开头开始查找当前光标下的关键字,如果当前光标不在要搜索的
关键字下,可以先用/或者?搜索,跳转到关键字后,再用[I命令.

如果当前文件是C/C++代码文件，[I 也会查找include的头文件。即可能会列出
多个文件下的匹配内容。如果不想要这个效果，可以先执行:set include=命令，
将include选项的值设成空，不会查找include文件，再执行[I命令，查找完后再
:set include& 命令重置include选项为默认值。
可以映射快捷键把这三个命令放到一起，方便操作. 例如:
:map <F7> :set include=<CR>[I:set include&<CR>

注意: [I 命令只能查找C/C++语言的关键字，有一些特殊字符会无法查找.

===== 在不同文件buffer间切换
用vim file1.txt file2.txt ...命令同时打开多个文件,或者在vim里面用edit命令
再打开其他文件,会有多个文件buffer。可以用下面命令在不同文件buffer间切换：
:bn         切换到下一个文件
:bp         切换到上一个文件
:ls         打印文件buffer的列表，带编号
:b [N]      切换到第N个文件,例如:b 3切换到第3个文件.用ls命令查看文件编号
:b {bufname} 通过文件名切换到对应的文件,输入文件名时,可以用Tab键补全

可以用 :help :buffer 命令查看这部分的完整帮助说明

===== 查看某个配置项的值
vim 使用 :set 命令设置配置项的值,但是没有 :get 命令来查看配置项的值.
要查看配置项的值,也是用 :set 命令,在配置项名称后面加上'?'即可。
:set option?  打印 option 配置项的值.
  例如执行 :set shiftwidth? 命令，会打印shiftwidth=4,显示对应的值
:verbose set option?  打印option配置项的值最终是在哪里被设置
  例如执行:verbose set shiftwidth?命令,就能看到哪个文件设置了这一项
  shiftwidth=4
      Last set from ~/.vimrc line 68
:set    打印所有跟默认配置值不同的配置项值,也就是被修改过的配置项.
:set option&  重置option配置项的值为源码默认值.
  注意不是恢复成vimrc、或其他vim配置文件所设置的值.

vim有一类配置项控制功能开关,只有开或者关两个值,这类选项可以用下面
命令来切换选项的值. 当前打开,则切换后关闭;当前关闭,则切换后打开.
:set option!  反向切换开关类选项的值.
  这个方法可以用于映射快捷键动态开关某个选项值,只需要映射一个快捷键
  例如,:map <F8> :set hlsearch!<CR>命令映射F8键动态开关搜索高亮功能

可以用 :help :set 命令查看更多的帮助说明

对于开关类选项来说,set option 表示打开这个配置项.用 set option? 命令
查询这类配置的值,如果漏打?的话就会设置,会造成误操作.
可以用 :echo &option 命令来查看配置的值,且不会出现误操作.
&option是vim的表达式,表示获取option项的值 (用:help expr-option命令
查看它的帮助说明),然后用 :echo 命令打印这个值.

===== Backspace键不能删除字符或者时灵时不灵
在vim中要正常使用Backspace键删除字符，需要正确设置backspace选项的值。
:set nocompatible
:set backspace=indent,eol,start
在compatible模式下，设置backspace=indent,eol,start也能工作，但是
被删除的字符不会立刻显示为空白，显示效果不好。

为了兼容vim 5.4版本和之前版本，:set backspace=2 相当于
:set backspace=indent,eol,start

对 backspace=indent,eol,start 设置项说明如下。
indent: 允许删除自动缩进的内容。如果没有这一项，自动缩进添加的
  空白字符无法用Backspace来删除，可以删除手动添加的缩进空格。
eol: 允许删除换行符。如果没有这一项，当已经删除到行首时，不能
  用Backspace键删除换行符，也就是不能自动往上删除到上一行。
start: 允许删除进入插入模式前已有的内容。如果没有这一项，不能
  删除进入插入模式前已有的内容，只能删除当前插入模式下输入的
  字符。例如,输入abc三个字符，按Esc退出插入模式，再按a，进入
  插入模式，输入efg。此时Backspace键可以删除efg，不能删除abc.

在Debian或Ubuntu发行版本上，不需要在~/.vimrc中自行配置backspace
选项，Backspace键就能正常使用。原因是系统自带的vim版本会加载一个
debian.vim文件,默认已经设置这一项。可以用:verbose set backspace?
命令来查看backspace选项的值、以及它被哪个地方设置。

如果使用自己源码编译的vim版本,并自行配置~/.vimrc文件，可能默认就
没有配置backspace选项，导致Backspace键用不了,或者时灵时不灵。此时
需要在~/.vimrc文件中主动配置backspace选项的值为indent,eol,start.

用 :help 'backspace' 命令查看该选项的帮助说明

===== 自动输入指定个数的重复字符
在编辑的时候，有时候需要输入一长串的重复字符。例如:
########、========、//////、*********、------- 等。
为了对齐美观，可能会希望每一行这些重复字符的个数都相同。
我们可以通过复制来做到这一点，但需要先找到已经写好的行，
复制，再拷贝，比较麻烦。
有一个比较简单的方法是，在输入的时候，就指定要重复的字符个数，然后
输入一个字符，接着退出插入模式，vim会自动输入指定个数的重复字符。
例如在普通模式下，输入10a=，按a后，会进入插入模式，只输入一个=字符，
再按Esc，vim会自动再输入9个=，得到10个=字符。
这里的 a 可以换成其他进入插入模式的命令，例如 i 命令，也不限于插入
单个字符。实际上，进入插入模式后输入的所有内容，都会在退出插入模式
时被重复输入。

用 :help count 命令可以看到在命令前面输入数字重复执行命令的帮助说明

===== 在文件内跳转到变量定义处
在当前文件内，可以使用下面命令来快速跳转到变量定义处。
gd  在当前函数内查找当前光标下的单词,如果找到,就跳转到该单词在函数
    内第一次出现的地方.  对局部变量来说,也就是跳转到变量定义处。
    如果光标下的单词对应全局变量，这个命令不会跳转到全局变量定义处,
    还是会跳转到函数内第一次用到该变量的地方。
    这个命令本身没有进行语法解析，只是简单的执行字符串搜索并跳转。
    在实际使用时可用来查找任意单词，不限于查找变量。

gD  在当前文件内查找当前光标下的单词,如果找到,就跳转到该单词在文件
    内第一次出现的地方.对全局变量来说,也就是跳转到全局变量定义处.
    对局部变量来说,也能跳转到局部变量定义处.如果变量是在文件外定义,
    就只能跳转到当前文件内第一次用到该变量的地方.

实际测试，gd命令只能在函数内搜索，不会跳转到全局变量定义处。gD命令
是在整个文件内搜索，可以跳转到全局变量定义处，也能跳转到函数内的
局部变量定义处。如果不确认要搜索的单词是全局变量，还是局部变量，统
一用gD命令即可,这个命令一定能跳转到文件内的变量定义处，比gd要方便.

可以用 :help gd 命令来查看帮助说明,这两个命令的帮助说明是相邻的。

===== 增加或减少缩进
vim可以用 = 命令对代码文件自动格式化对齐。用法说明如下。
==  对光标所在行进行自动格式化对齐，会根据代码情况增加或减少缩进.
    可以在 == 前面加上数字，指定要同时处理多少行。
gg=G    对整个文件都重新格式化对齐。
={motion}   自动格式化{motion}操作前后的行. {motion}可以是vim任意
    移动光标的操作.例如常见的 j、k、G、% 等. % 用于移动光标到匹配
    的括号.当光标在{或者}上时，=%会格式化整个{}的内容,包括{}自身.

下面的 a{、i{ 也是 {motion} 的一种。
=a{ 当光标所在行位于{}花括号内时，自动格式化对齐整个{}的内容,包括
    {}这两个花括号所在的行也会一起格式化，以{的上一行为基准来对齐.
    如果{自身的对齐错乱了,可以把{所在的行也一起对齐。
=i{ 当光标所在行位于{}花括号内时，自动格式化对齐整个{}的内容,不包
    括{}这两个花括号所在的行,以{所在的行为基准来进行对齐.如果{自身
    所在行的对齐错乱，不会把{所在的行也一起对齐。

用 = 命令自动格式化，默认使用C语言的对齐风格。如果不喜欢这种风格，
也可以手动增加或减少缩进来对齐。下面几个命令可以用于手动缩进。
>>  把光标所在行向右增加缩进，缩进空格数由shiftwidth选项指定
>{motion}   对{motion}操作前后的行向右增加缩进.缩进空格数由
    shiftwidth选项指定.{motion}可以是vim任意移动光标的操作.
<<  把光标所在行向左减少缩进，缩进空格数由shiftwidth选项指定
<{motion}   对{motion}操作前后的行向左减少缩进.缩进空格数由
    shiftwidth选项指定.{motion}可以是vim任意移动光标的操作.

下面的 a{、i{ 也是 {motion} 的一种，可以用于 > 或者 < 命令。
>a{ 当光标所在行位于{}花括号内时，将整个{}的内容向右增加缩进,
    包括{}这两个花括号所在的行也会一起缩进。
>i{ 当光标所在行位于{}花括号内时，将整个{}的内容向右增加缩进,
    不包括{}这两个花括号所在的行，它们自身的行不会被缩进。

>   增加缩进,"x>"表示增加以下x行的缩进
<   减少缩进,"x<"表示减少以下x行的缩进
    实际验证，输入第一个 > 或者 < 时，并不会立刻缩进，需要再按其他按键（非数字键）才会缩进。
    使用 help > 命令查看，这两个命令的正确格式是 >{motion}，<{motion}，也就是说，输入 > 后，
    才需要进行motion操作才是完整的命令。使用 help motion 对motion操作进行了说明。
    如果只是想缩进当前光标所在行，简单的做法就是输入 < 或者 > 后，再按一下空格键即可。

用 :help = 命令查看=的帮助说明。用 :help < 查看 < 和 > 的帮助说明。
用 :help motion.txt 命令查看有哪些 {motion} 操作可以移动光标。
用 :help usr_30.txt 查看 =、> 命令在对齐方面的举例说明。

===== 在多窗口间跳转 和 改变窗口大小
vim可以用 :sp 命令打开一个新的水平切分窗口，在不同的窗口显示各自的内容。
用 :vsplit 命令则是打开一个新的垂直切分窗口。

显示多窗口后，可以用下面几个方式在不同窗口之间跳转，以便选择操作哪个窗口。
CTRL-W j    光标切换到下一个窗口
CTRL-W k    光标切换到上一个窗口
CTRL-W h    光标切换到左边窗口。如果左边没有窗口，保持在当前窗口不变。
CTRL-W l    光标切换到右边窗口
CTRL-W w    在各个窗口之间来回切换。每输入一次，切换一个窗口。不停输入，
            可以遍历所有窗口。在只有两个窗口时很方便来回切换。
这些键位的输入方式是，同时按住CTRL键和w键(小写的w，不需要按Shift键)，然后
松开，再按下一个键，例如j键、w键等。不松开CTRL-W，直接按下一个键也可以。
上面的 k/j/h/l 键可以换成键盘的上下左右光标键。

可以执行 :q 命令退出且只退出当前窗口。如果当前只有一个窗口，会退出vim。
CTRL-W q 命令跟 :q 效果相同。
CTRL-W c 命令也可以退出当前窗口。如果当前只有一个窗口，会报错，不退出vim.
:close 命令跟 CTRL-W c 效果相同。

有一些vim插件会弹出quickfix窗口，这些命令也可以用来在这些窗口之间跳转。

可以用下面命令来改变窗口大小
CTRL-W +    当前窗口增加一行。在按CTRL-W之前，可以先输入数字指定要增加
            多少行。按键方式是先同时按CTRL和w，然后松开，再输入+.
            增加当前窗口行数，其他窗口会减少行数，最多可以减小到只有一行.
CTRL-W -    当前窗口减少一行。同样可以先输入数字指定要减少多少行。
CTRL-W _    最大化当前窗口，其他窗口会缩小到只有一行。
            这里的_要按Shift键来输入。

用 :help windows.txt 命令查看完整的帮助说明。

===== gtags 插件指定忽略的目录或文件
vim可以集成gtags插件来查看函数定义和调用关系。在用gtags解析源代码时，
如果想要指定忽略某些目录，可以在要解析的目录下创建 gtags.conf 文件，
然后在这个文件里面配置 gtags 解析时要忽略的目录，参考格式如下：
default:\
        :skip=src/,lib/
:skip=后面跟着要忽略的目录路径，不同目录之间用逗号(,)隔开。这里不限于
指定目录，也可以指定文件名，或者通过通配符指定特定类型的文件。

在不加其他命令选项的情况下，gtags.conf文件一定要包含一个default:开头
的项，它默认就是从这一项开始处理。
这会覆盖默认的skip配置，可以用gtags --config skip来查看当前skip的值.

===== 使用session保存会话
vim的session类似于Source Insight的工程，也可以类比为其他IDE的工程，
可以保存打开的文件列表、窗口大小、当前选项设置等信息。
结合 viminfo 一起使用，可以保存命令历史、标记信息、寄存器信息等。
在编辑、或者查看多个文件时，可以用这个机制保存vim状态，下次打开
vim可以重新恢复到之前的状态。

:mksession [file]   保存当前session到一个vim脚本文件里面。[file]是
    可选参数，指定要保存的文件名。如果没有提供，默认名是Session.vim
:source {file} 加载{file}指定的vim脚本文件，传入之前保存的session
    脚本文件名，就会恢复到指定的session。
可以用 vim -S filename 命令在打开vim时就加载指定的脚本文件。
